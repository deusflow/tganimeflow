package bot

import (
	"encoding/json"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func fetchAndUnmarshal(url string, target interface{}) error {
	response, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("error fetching data: %w", err)
	}
	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return fmt.Errorf("error reading response: %w", err)
	}

	return json.Unmarshal(body, target)
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
func handleAPIError(lang, errType string) AnimeData {
	return AnimeData{Title: messages[lang][errType]}
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
func logRequest(operation string, err error) {
	if err != nil {
		log.Printf("Error in %s: %v", operation, err)
	}
}

// —Ç—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥–∏
func searchAnime(query string, lang string) AnimeData {
	url := fmt.Sprintf("%s/anime?q=%s&limit=1", jikanBaseURL, query)

	var result JikanResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("searchAnime", err)
		return handleAPIError(lang, "api_error")
	}

	if len(result.Data) == 0 {
		return handleAPIError(lang, "not_found")
	}

	return result.Data[0]
}

func getRandomAnime(lang string) AnimeData {
	url := fmt.Sprintf("%s/random/anime", jikanBaseURL)

	var result RandomAnimeResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("getRandomAnime", err)
		return handleAPIError(lang, "api_error")
	}

	return result.Data
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
func createLanguageKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "lang_ua"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá©üá∞ Dansk", "lang_da"),
		),
	)
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
func createQuickActionsKeyboard(lang string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_random"], "action_random"),
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_top"], "action_top"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_search"], "action_search"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_top_popular"], "action_top_popular"),
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_top_season"], "action_top_season"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_top_year"], "action_top_year"),
		),
	)
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
func createDonateKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí≥ PayPal", "https://paypal.me/deusflowro"),
			tgbotapi.NewInlineKeyboardButtonURL("üì± MobilePay", "https://qr.mobilepay.dk/box/d017b43a-052e-4884-8fd6-851349b234a2/pay-in"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ù§Ô∏è –î—è–∫—É—é!", "donate_thanks"),
		),
	)
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∞–Ω–∏–º–µ

func getTopAnimeWithFirst(url, messageKey, lang string) TopAnimeResult {
	var result JikanResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("getTopAnimeList", err)
		return TopAnimeResult{
			Text:    messages[lang]["api_error"],
			HasData: false,
		}
	}

	if len(result.Data) == 0 {
		return TopAnimeResult{
			Text:    messages[lang]["not_found"],
			HasData: false,
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
	topAnime := messages[lang][messageKey] + "\n\n"
	for i, anime := range result.Data {
		topAnime += fmt.Sprintf("%d. %s - ‚≠ê %.1f\n", i+1, anime.Title, anime.Score)
	}

	return TopAnimeResult{
		Text:       topAnime,
		FirstAnime: result.Data[0], // –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
		HasData:    true,
	}
}

func getTopAnime(lang string) TopAnimeResult {
	url := fmt.Sprintf("%s/top/anime?limit=5", jikanBaseURL)
	return getTopAnimeWithFirst(url, "top_anime", lang)
}

func getTopPopularAnime(lang string) TopAnimeResult {
	url := fmt.Sprintf("%s/top/anime?filter=bypopularity&limit=5", jikanBaseURL)
	return getTopAnimeWithFirst(url, "top_popular", lang)
}

func getTopSeasonAnime(lang string) TopAnimeResult {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü
	year := time.Now().Year()
	month := time.Now().Month()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω –ø–æ –º–µ—Å—è—Ü—É
	season := "winter"
	switch month {
	case 1, 2, 12:
		season = "winter"
	case 3, 4, 5:
		season = "spring"
	case 6, 7, 8:
		season = "summer"
	case 9, 10, 11:
		season = "fall"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
	url := fmt.Sprintf("%s/seasons/%d/%s?limit=5", jikanBaseURL, year, season)
	return getTopAnimeWithFirst(url, "top_season", lang)
}

func getTopYearAnime(lang string) TopAnimeResult {
	year := time.Now().Year()
	url := fmt.Sprintf("%s/anime?start_date=%d-01-01&end_date=%d-12-31&order_by=score&sort=desc&limit=5", jikanBaseURL, year, year)
	return getTopAnimeWithFirst(url, "top_year", lang)
}

func formatAnimeDetails(anime AnimeData, lang string) string {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –∂–∞–Ω—Ä—ã –≤ —Å—ÇÔøΩÔøΩ–æ–∫—É
	genresText := ""
	for i, genre := range anime.Genres {
		if i > 0 {
			genresText += ", "
		}
		genresText += genre.Name
	}

	//–∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π
	episodesText := "?" // –µ—Å–ª–∏ —Å–µ—Ä–∏–π –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç "?"
	if anime.Episodes > 0 {
		episodesText = fmt.Sprintf("%d", anime.Episodes)
	}

	//–æ–ø–∏—Å–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏ÔøΩÔøΩ–∞–µ–º –¥–ª–∏–Ω—É
	synopsis := anime.Synopsis
	if len(synopsis) > 200 {
		synopsis = synopsis[:200] + "..."
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
	episodesLabel := "episodes"
	switch lang {
	case "ua":
		episodesLabel = "—Å–µ—Ä—ñ–π"
	case "en":
		episodesLabel = "episodes"
	case "da":
		episodesLabel = "episoder"
	default:
		episodesLabel = "episodes"
	}

	return fmt.Sprintf(
		"üéå %s\n‚≠ê %.1f\nüì∫ %s %s\nüìä %s\nüé≠ %s\n\nüìù %s",
		anime.Title,
		anime.Score,
		episodesText,
		episodesLabel,
		anime.Status,
		genresText,
		synopsis,
	)
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
func sendAnimeWithPhoto(bot *tgbotapi.BotAPI, chatID int64, anime AnimeData, lang string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	caption := formatAnimeDetails(anime, lang)

	if anime.Images.JPG.LargeImageURL != "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(anime.Images.JPG.LargeImageURL))
		photo.Caption = caption
		if keyboard != nil {
			photo.ReplyMarkup = *keyboard
		}
		bot.Send(photo)
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, caption)
		if keyboard != nil {
			msg.ReplyMarkup = *keyboard
		}
		bot.Send(msg)
	}
}

// –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
func logUserAction(userID int64, action string, lang string) {

	if !knownUsers[userID] {
		knownUsers[userID] = true
		botAnalytics.TotalUsers++
		fmt.Printf("üìä –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—Å–µ–≥–æ: %d\n", botAnalytics.TotalUsers)
	}

	// –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
	botAnalytics.CommandsUsed[action]++

	// –°—á–∏ÔøΩÔøΩ–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤
	botAnalytics.LanguagesUsed[lang]++

	fmt.Printf("üìä –î–µ–π—Å—Ç–≤–∏–µ: %s, –Ø–∑—ã–∫: %s, –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ '%s': %d\n",
		action, lang, action, botAnalytics.CommandsUsed[action])
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
var botAnalytics = Analytics{
	TotalUsers:    0,
	CommandsUsed:  make(map[string]int),
	LanguagesUsed: make(map[string]int),
}

var knownUsers = make(map[int64]bool) // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

func Start() {

	err := godotenv.Load()
	if err != nil {
		log.Panic("Loading error .env file")
	}
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Panic("TELEGRAM_TOKEN not found in .env")
	}
	fmt.Println("Bot started")

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	fmt.Println("Bot authorized How:", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	userLangs := make(map[int64]string) // userID -> –≤—ã–±—ÄÔøΩÔøΩÔøΩ–Ω–Ω—ã–π —è–∑—ã–∫

	for update := range updates {
		if update.Message != nil {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
			fmt.Println("Message Received:", update.Message.Text)

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–ΩÔøΩÔøΩÔøΩÔøΩ–µ –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
			userID := update.Message.From.ID
			chatID := update.Message.Chat.ID
			lang := userLangs[userID]
			if lang == "" {
				lang = "ua" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞—ó–Ω—ÅÔøΩÔøΩÔøΩ–∏–π
			}

			var responseText string
			var keyboard *tgbotapi.InlineKeyboardMarkup

			if update.Message.IsCommand() && update.Message.Command() == cmdStart {
				logUserAction(userID, "start", lang)
				responseText = messages[lang]["start"]

				// –ï—Å–ª–∏ —è–∑—ãÔøΩÔøΩ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥ÔøΩÔøΩ–π—Å—Ç–≤–∏–π, –∏–Ω–∞—á–µ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
				if userLangs[userID] != "" {
					quickKeyboard := createQuickActionsKeyboard(lang)
					keyboard = &quickKeyboard
				} else {
					languageKeyboard := createLanguageKeyboard()
					keyboard = &languageKeyboard
				}

			} else if update.Message.IsCommand() && update.Message.Command() == cmdHelp {
				logUserAction(userID, "help", lang)
				responseText = messages[lang]["help"]
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdRandom {
				logUserAction(userID, "random", lang)
				anime := getRandomAnime(lang)
				quickKeyboard := createQuickActionsKeyboard(lang)
				sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
				continue

			} else if update.Message.IsCommand() && update.Message.Command() == cmdTop {
				logUserAction(userID, "top", lang)
				topResult := getTopAnime(lang)
				if topResult.HasData {
					// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
					msg := tgbotapi.NewMessage(chatID, topResult.Text)
					bot.Send(msg)
					// –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, topResult.FirstAnime, lang, &quickKeyboard)
					continue
				} else {
					responseText = topResult.Text // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					quickKeyboard := createQuickActionsKeyboard(lang)
					keyboard = &quickKeyboard
				}

			} else if update.Message.IsCommand() && update.Message.Command() == cmdDonate {
				logUserAction(userID, "donate", lang)
				responseText = messages[lang]["donate_message"]
				donateKeyboard := createDonateKeyboard()
				keyboard = &donateKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdStats {
				logUserAction(userID, "stats", lang)
				statsText := fmt.Sprintf("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n\nüìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n", botAnalytics.TotalUsers)

				for command, count := range botAnalytics.CommandsUsed {
					statsText += fmt.Sprintf("‚Ä¢ %s: %d —Ä–∞–∑\n", command, count)
				}

				statsText += "\nüåç –Ø–∑—ã–∫–∏:\n"
				for language, count := range botAnalytics.LanguagesUsed {
					statsText += fmt.Sprintf("‚Ä¢ %s: %d —Ä–∞–∑\n", language, count)
				}

				responseText = statsText

			} else if !update.Message.IsCommand() {
				if update.Message.Text == "" {
					responseText = messages[lang]["empty_message"]
				} else {
					logUserAction(userID, "search", lang)
					anime := searchAnime(update.Message.Text, lang)
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
					continue
				}
			}

			// –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
			msg := tgbotapi.NewMessage(chatID, responseText)
			if keyboard != nil {
				msg.ReplyMarkup = *keyboard
			}
			bot.Send(msg)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			userID := update.CallbackQuery.From.ID
			chatID := update.CallbackQuery.Message.Chat.ID

			lang := userLangs[userID]
			if lang == "" {
				lang = "ua"
			}

			var responseText string
			var keyboard *tgbotapi.InlineKeyboardMarkup

			switch update.CallbackQuery.Data {
			case "lang_ua":
				logUserAction(userID, "lang_change", "ua")
				userLangs[userID] = "ua"
				responseText = messages["ua"]["lang_changed"] + "\n" + messages["ua"]["start"]
				quickKeyboard := createQuickActionsKeyboard("ua")
				keyboard = &quickKeyboard

			case "lang_en":
				logUserAction(userID, "lang_change", "en")
				userLangs[userID] = "en"
				responseText = messages["en"]["lang_changed"] + "\n" + messages["en"]["start"]
				quickKeyboard := createQuickActionsKeyboard("en")
				keyboard = &quickKeyboard

			case "lang_da":
				logUserAction(userID, "lang_change", "da")
				userLangs[userID] = "da"
				responseText = messages["da"]["lang_changed"] + "\n" + messages["da"]["start"]
				quickKeyboard := createQuickActionsKeyboard("da")
				keyboard = &quickKeyboard

			case "action_random":
				logUserAction(userID, "random", lang)
				anime := getRandomAnime(lang)
				quickKeyboard := createQuickActionsKeyboard(lang)
				sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
				continue

			case "action_top":
				logUserAction(userID, "top", lang)
				topResult := getTopAnime(lang)
				if topResult.HasData {
					// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
					msg := tgbotapi.NewMessage(chatID, topResult.Text)
					bot.Send(msg)
					// –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, topResult.FirstAnime, lang, &quickKeyboard)
					continue
				} else {
					responseText = topResult.Text // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				}
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			case "action_top_popular":
				logUserAction(userID, "top_popular", lang)
				topResult := getTopPopularAnime(lang)
				if topResult.HasData {
					// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
					msg := tgbotapi.NewMessage(chatID, topResult.Text)
					bot.Send(msg)
					// –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, topResult.FirstAnime, lang, &quickKeyboard)
					continue
				} else {
					responseText = topResult.Text // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				}
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			case "action_top_year":
				logUserAction(userID, "top_year", lang)
				topResult := getTopYearAnime(lang)
				if topResult.HasData {
					// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
					msg := tgbotapi.NewMessage(chatID, topResult.Text)
					bot.Send(msg)
					// –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, topResult.FirstAnime, lang, &quickKeyboard)
					continue
				} else {
					responseText = topResult.Text // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				}
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			case "action_top_season":
				logUserAction(userID, "top_season", lang)
				topResult := getTopSeasonAnime(lang)
				if topResult.HasData {
					// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
					msg := tgbotapi.NewMessage(chatID, topResult.Text)
					bot.Send(msg)
					// –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, topResult.FirstAnime, lang, &quickKeyboard)
					continue
				} else {
					responseText = topResult.Text // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				}
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			case "donate_thanks":
				logUserAction(userID, "donate_thanks", lang)
				responseText = messages[lang]["donate_thanks"]
			}

			msg := tgbotapi.NewMessage(chatID, responseText)

			if keyboard != nil {
				msg.ReplyMarkup = *keyboard
			}

			bot.Send(msg)
		}
	}
}
