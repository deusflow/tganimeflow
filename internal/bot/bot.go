package bot

import (
	"encoding/json"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"io"
	"log"
	"net/http"
	"os"
)

// —Ç—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥–∏
func searchAnime(query string, lang string) string {
	url := fmt.Sprintf("https://api.jikan.moe/v4/anime?q=%s&limit=1", query)
	response, err := http.Get(url)
	if err != nil {
		log.Println("Error fetching data from Jikan API:", err)
		return messages[lang]["api_error"]
	}

	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return messages[lang]["read_error"]
	}
	var result JikanResponse
	err = json.Unmarshal(body, &result)
	if err != nil {
		return messages[lang]["json_error"]
	}
	if len(result.Data) == 0 {
		return messages[lang]["not_found"]
	}

	anime := result.Data[0]
	return fmt.Sprintf(messages[lang]["anime_found"], anime.Title, anime.Score)
}

func getRandomAnime(lang string) string {
	url := "https://api.jikan.moe/v4/anime/random"
	response, err := http.Get(url)
	if err != nil {
		log.Println("Error fetching random anime from Jikan API:", err)
		return messages[lang]["api_error"]
	}

	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return messages[lang]["read_error"]
	}
	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ –æ—Ç–≤–µ—Ç–∞
	var result RandomAnimeResponse
	err = json.Unmarshal(body, &result)
	if err != nil {
		return messages[lang]["json_error"]
	}

	return fmt.Sprintf(messages[lang]["anime_found"], result.Data.Title, result.Data.Score)
}

// AnimeData –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Jikan API
type AnimeData struct {
	Title string  `json:"title"`
	Score float64 `json:"score"`
}

type JikanResponse struct {
	Data []AnimeData `json:"data"`
}

type RandomAnimeResponse struct {
	Data AnimeData `json:"data"`
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
func createLanguageKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "lang_ua"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá©üá∞ Dansk", "lang_da"),
		),
	)
}

func getTopAnime(lang string) string {
	url := "https://api.jikan.moe/v4/top/anime?limit=5"
	response, err := http.Get(url)
	if err != nil {
		log.Println("Error fetching top anime from Jikan API:", err)
		return messages[lang]["api_error"]
	}

	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return messages[lang]["read_error"]
	}

	var result JikanResponse
	err = json.Unmarshal(body, &result)
	if err != nil {
		return messages[lang]["json_error"]
	}

	if len(result.Data) == 0 {
		return messages[lang]["not_found"]
	}

	topAnime := messages[lang]["top_anime"] + "\n\n"
	for i, anime := range result.Data {
		topAnime += fmt.Sprintf("%d. %s - ‚≠ê %.1f\n", i+1, anime.Title, anime.Score)
	}
	return topAnime
}

// –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
var messages = map[string]map[string]string{
	"ua": {
		"start":         "–•–º–º... –ö—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–π —Å–º–µ–ª—ã–π, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–µ–≤–æ–∂–∏—Ç—å DeusAnimeFlow –±–æ—Ç–∞? üíÄ\n\n–ù—É –ª–∞–¥–Ω–æ... –Ø ‚Äî *Anime Finder Bot*, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—ë–º–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∞–Ω–∏–º–µ. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—ã —Å–∫–∞–∂–µ—à—å 'Sugoi'.\n\n–ù–æ —É—á—Ç–∏‚Ä¶ –µ—Å–ª–∏ —ç—Ç–æ —Å–∫—É—á–Ω–æ–µ –∞–Ω–∏–º–µ ‚Äî —è —Ñ—ã—Ä–∫–Ω—É. üòè\n\n–ü–æ–≥–Ω–∞–ª–∏ –∏—Å–∫–∞—Ç—å, rebel-—á–∞–Ω!",
		"help":          "üåÄ –¢–∏ –∞–∫—Ç–∏–≤—É–≤–∞–≤ –°–¢–ï–ù–î *ANIME FINDER*! üåÄ\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–æ—ë –∞–Ω–∏–º–µ-–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –∏–ª–∏ –º–∞–Ω–≥–∏ ‚Äî –∏ –Ø, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥, –≤—ã–¥–∞–º —Ç–µ–±–µ:\nüéØ –ù–∞–∑–≤–∞–Ω–∏–µ\nüìä –†–µ–π—Ç–∏–Ω–≥\nüí• (–≤ –±—É–¥—É—â–µ–º ‚Äî –∂–∞–Ω—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ)\n\nüí¨ –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç–æ–π–Ω—ã–µ –î–∂–æ—Å—Ç–∞—Ä–∞:\n/start ‚Äî *–ü—Ä–∏–∑–æ–≤–∏ —Å—Ç–µ–Ω–¥!*\n/help ‚Äî *–í—ã–∑–æ–≤–∏ —Å–∏–ª—É –º—É–¥—Ä–æ—Å—Ç–∏!*",
		"empty_message": "–ê —â–æ–∂ —Ç—É—Ç —Ç–∞–∫ –ø—É—Å—Ç–æ, —Ç—Ä—è—Å—Ü—è –±–æ–≥—É? –†–æ–∑—à–∏—Ä—å —Å–≤–æ—ó –≤–æ–ª–æ–¥—ñ–Ω–Ω—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∞–Ω—ñ–º–µ —ñ —è –π–æ–≥–æ –∑–Ω–∞–π–¥—É! –ù–µ –±—É–¥—å —Ç–∞–∫–∏–º –ª–µ–¥–∞—â–∏–º, rebel-—á–∞–Ω!",
		"api_error":     "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∞–Ω—ñ–º–µ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ, rebel-—á–∞–Ω.",
		"read_error":    "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API. –ú–æ–∂–µ, —Å–µ—Ä–≤–µ—Ä –≤—Ç–æ–º–∏–≤—Å—è? –ß–∏ —Ü–µ Kuromi –∑–Ω–æ–≤—É —à–∞–ª–∏—Ç—å?",
		"json_error":    "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API. –ú–æ–∂–µ, —Å–µ—Ä–≤–µ—Ä –≤–∏—Ä—ñ—à–∏–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —Å–≤–æ—î–º—É —Ç–∞—î–º–Ω–æ–º—É –¥—ñ–∞–ª–µ–∫—Ç—ñ?",
		"not_found":     "–ê–Ω—ñ–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –Ω–∞–∑–≤—É, –º–æ–∂–µ —â–æ—Å—å –±—ñ–ª—å—à EPIC?",
		"anime_found":   "üéå –ù–∞–∑–≤–∞: %s\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f",
		"lang_changed":  "üåç –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Å–æ–ª–æ–≤'—ó–Ω–∞! –ü–æ—â–µ–±–µ—á–µ–º–æ —Ä–∞–∑–æ–º, rebel-—á–∞–Ω!",
		"random_anime":  "üé≤ –í–∏–¥–∫—É—Å—ñ–Ω—å–∫–µ –∞–Ω—ñ–º–µ –¥–ª—è —Ç–µ–±–µ –º—ñ–π –ø—É–ø—Å–∏–∫—É:",
		"top_anime":     "üèÜ –¢–æ–ø –∞–Ω—ñ–º–µ:",
	},
	"en": {
		"start":         "Hmm... Who dares to disturb the DeusAnimeFlow bot? üíÄ\n\nAlright... I'm *Anime Finder Bot*, your personal dark guide to the anime world. Write a title, and I'll find it faster than you can say 'Sugoi'.\n\nBut remember... if it's boring anime ‚Äî I'll snort. üòè\n\nLet's go searching, rebel-chan!",
		"help":          "üåÄ You activated STAND *ANIME FINDER*! üåÄ\n\nThis bot is created for those who seek their anime destiny. Write anime or manga title ‚Äî and I, your personal stand, will give you:\nüéØ Title\nüìä Rating\nüí• (in future ‚Äî genre and description)\n\nüí¨ Commands worthy of Joestar:\n/start ‚Äî *Summon the stand!*\n/help ‚Äî *Call the power of wisdom!*",
		"empty_message": "What's so empty here, for crying out loud? Expand your domain, write anime title and I'll find it! Don't be so lazy, rebel-chan!",
		"api_error":     "Error occurred while searching anime. Try later, rebel-chan.",
		"read_error":    "Error reading API response. Maybe server got tired? Or is Kuromi messing around again?",
		"json_error":    "Error parsing JSON response from API. Maybe server decided to speak its secret dialect?",
		"not_found":     "Anime not found. Try another title, maybe something more EPIC?",
		"anime_found":   "üéå Title: %s\n‚≠ê Rating: %.1f",
		"lang_changed":  "üåç Language changed to English! Now I'll speak with you in English, rebel-chan!",
		"random_anime":  "üé≤ Random anime for you:",
		"top_anime":     "üèÜ Top anime:",
	},
	"da": {
		"start":         "Hvem t√∏r forstyrre DeusAnimeFlow-botten? üíÄ\n\nOkay da... Jeg er *Anime Finder Bot*, din personlige m√∏rke guide til anime-verdenen. Skriv en titel, og jeg finder det hurtigere, end du kan sige 'Sugoi'.\n\nMen husk... hvis det er kedelig anime ‚Äî s√• fnyster jeg. üòè\n\nLad os s√∏ge, rebel-chan!",
		"help":          "üåÄ Du har aktiveret STANDEN *ANIME FINDER*! üåÄ\n\nDenne bot er skabt til dem, der s√∏ger deres anime-sk√¶bne. Skriv titlen p√• en anime eller manga ‚Äî og jeg, din personlige stand, vil give dig:\nüéØ Titel\nüìä Bed√∏mmelse\nüí• (senere ‚Äî genre og beskrivelse)\n\nüí¨ Kommandoer v√¶rdige en Joestar:\n/start ‚Äî *P√•kald standen!*\n/help ‚Äî *Tilkald visdommens kraft!*",
		"empty_message": "Hvad er s√• tomt her, alts√•? Udvid dit dom√¶ne og skriv en anime-titel! V√¶r nu ikke doven, rebel-chan!",
		"api_error":     "Der opstod en fejl under s√∏gning. Pr√∏v igen senere, rebel-chan.",
		"read_error":    "Fejl ved l√¶sning af API-svar. M√•ske blev serveren tr√¶t? Eller leger Kuromi igen?",
		"json_error":    "Fejl ved fortolkning af JSON-svar fra API. Taler serveren sit hemmelige sprog?",
		"not_found":     "Anime ikke fundet. Pr√∏v en anden titel ‚Äî m√•ske noget mere EPISK?",
		"anime_found":   "üéå Titel: %s\n‚≠ê Bed√∏mmelse: %.1f",
		"lang_changed":  "üåç Sproget er nu √¶ndret til dansk! Klar til at snakke med mig, rebel-chan? R√∏dgr√∏d med fl√∏de, huh?! üòèüá©üá∞",
		"random_anime":  "üé≤ Tilf√¶ldig anime til dig:",
		"top_anime":     "üèÜ Top anime:",
	},
}

func Start() {
	err := godotenv.Load()
	if err != nil {
		log.Panic("Loading error .env file")
	}
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Panic("TELEGRAM_TOKEN not found in .env")
	}
	fmt.Println("Bot started")

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	fmt.Println("Bot authorized How:", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	userLangs := make(map[int64]string) // userID -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫

	for update := range updates {
		if update.Message != nil {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
			fmt.Println("Message Received:", update.Message.Text)
			if update.Message.IsCommand() && update.Message.Command() == "start" {
				userID := update.Message.From.ID
				lang := userLangs[userID]
				if lang == "" {
					lang = "ua" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
				}
				msg := tgbotapi.NewMessage(
					update.Message.Chat.ID,
					messages[lang]["start"],
				)
				msg.ReplyMarkup = createLanguageKeyboard()
				bot.Send(msg)
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–µ—Ä–µ–º –µ–≥–æ –∏–∑ messages map
			} else if update.Message.IsCommand() && update.Message.Command() == "help" {
				userID := update.Message.From.ID
				lang := userLangs[userID]
				if lang == "" {
					lang = "ua" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
				}
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, messages[lang]["help"])
				bot.Send(msg)

			} else if update.Message.IsCommand() && update.Message.Command() == "random" {
				userID := update.Message.From.ID
				lang := userLangs[userID]
				if lang == "" {
					lang = "ua" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
				}
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, getRandomAnime(lang))
				bot.Send(msg)

			} else if !update.Message.IsCommand() {
				userID := update.Message.From.ID
				chatID := update.Message.Chat.ID
				lang := userLangs[userID]
				if lang == "" {
					lang = "ua"
				}

				if update.Message.Text == "" {
					// –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
					msg := tgbotapi.NewMessage(
						chatID,
						messages[lang]["empty_message"],
					)
					bot.Send(msg)
				} else {
					// –ø–µ—Ä–µ–¥–∞—ë–º –∏ query, –∏ lang
					msg := tgbotapi.NewMessage(
						chatID,
						searchAnime(update.Message.Text, lang),
					)
					bot.Send(msg)
				}

			}

		}
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏

		if update.CallbackQuery != nil {
			userID := update.CallbackQuery.From.ID
			chatID := update.CallbackQuery.Message.Chat.ID

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
			switch update.CallbackQuery.Data {
			case "lang_ua":
				userLangs[userID] = "ua"
			case "lang_en":
				userLangs[userID] = "en"
			case "lang_da":
				userLangs[userID] = "da"
			}

			// –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			lang := userLangs[userID]

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
			msg := tgbotapi.NewMessage(chatID, messages[lang]["lang_changed"])
			bot.Send(msg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
			greet := tgbotapi.NewMessage(chatID, messages[lang]["start"])
			bot.Send(greet)
		}
	}
}
