package bot

import (
	"encoding/json"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"io"
	"log"
	"net/http"
	"os"
)

const jikanBaseURL = "https://api.jikan.moe/v4"

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
const (
	cmdStart  = "start"
	cmdHelp   = "help"
	cmdRandom = "random"
	cmdTop    = "top"
	cmdDonate = "donate"
	cmdStats  = "stats"
)

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func fetchAndUnmarshal(url string, target interface{}) error {
	response, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("error fetching data: %w", err)
	}
	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return fmt.Errorf("error reading response: %w", err)
	}

	return json.Unmarshal(body, target)
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
func handleAPIError(lang, errType string) AnimeData {
	return AnimeData{Title: messages[lang][errType]}
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
func logRequest(operation string, err error) {
	if err != nil {
		log.Printf("Error in %s: %v", operation, err)
	}
}

// —Ç—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥–∏
func searchAnime(query string, lang string) AnimeData {
	url := fmt.Sprintf("%s/anime?q=%s&limit=1", jikanBaseURL, query)

	var result JikanResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("searchAnime", err)
		return handleAPIError(lang, "api_error")
	}

	if len(result.Data) == 0 {
		return handleAPIError(lang, "not_found")
	}

	return result.Data[0]
}

func getRandomAnime(lang string) AnimeData {
	url := fmt.Sprintf("%s/random/anime", jikanBaseURL)

	var result RandomAnimeResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("getRandomAnime", err)
		return handleAPIError(lang, "api_error")
	}

	return result.Data
}

// AnimeData –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Jikan API
type AnimeData struct {
	Title    string  `json:"title"`
	Score    float64 `json:"score"`
	Synopsis string  `json:"synopsis"`
	Episodes int     `json:"episodes"`
	Status   string  `json:"status"`
	Genres   []Genre `json:"genres"`
	Images   Images  `json:"images"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
type Analytics struct {
	TotalUsers    int            `json:"total_users"`
	CommandsUsed  map[string]int `json:"commands_used"`
	LanguagesUsed map[string]int `json:"languages_used"`
}

type Genre struct {
	Name string `json:"name"`
}

type Images struct {
	JPG ImageData `json:"jpg"`
}

type ImageData struct {
	LargeImageURL string `json:"large_image_url"`
}
type JikanResponse struct {
	Data []AnimeData `json:"data"`
}

type RandomAnimeResponse struct {
	Data AnimeData `json:"data"`
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
func createLanguageKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "lang_ua"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá©üá∞ Dansk", "lang_da"),
		),
	)
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
func createQuickActionsKeyboard(lang string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_random"], "action_random"),
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_top"], "action_top"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(messages[lang]["btn_search"], "action_search"),
		),
	)
}

// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
func createDonateKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí≥ PayPal", "https://paypal.me/deusflowro"),
			tgbotapi.NewInlineKeyboardButtonURL("üì± MobilePay", "https://qr.mobilepay.dk/box/d017b43a-052e-4884-8fd6-851349b234a2/pay-in"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ù§Ô∏è –î—è–∫—É—é!", "donate_thanks"),
		),
	)
}

func getTopAnime(lang string) string {
	url := fmt.Sprintf("%s/top/anime?limit=5", jikanBaseURL)

	var result JikanResponse
	if err := fetchAndUnmarshal(url, &result); err != nil {
		logRequest("getTopAnime", err)
		return messages[lang]["api_error"]
	}

	if len(result.Data) == 0 {
		return messages[lang]["not_found"]
	}

	topAnime := messages[lang]["top_anime"] + "\n\n"
	for i, anime := range result.Data {
		topAnime += fmt.Sprintf("%d. %s - ‚≠ê %.1f\n", i+1, anime.Title, anime.Score)
	}
	return topAnime
}

func formatAnimeDetails(anime AnimeData, lang string) string {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –∂–∞–Ω—Ä—ã –≤ —Å—Ç—Ä–æ–∫—É
	genresText := ""
	for i, genre := range anime.Genres {
		if i > 0 {
			genresText += ", "
		}
		genresText += genre.Name
	}

	//–∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π
	episodesText := "?" // –µ—Å–ª–∏ —Å–µ—Ä–∏–π –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç "?"
	if anime.Episodes > 0 {
		episodesText = fmt.Sprintf("%d", anime.Episodes)
	}

	//–æ–ø–∏—Å–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
	synopsis := anime.Synopsis
	if len(synopsis) > 200 {
		synopsis = synopsis[:200] + "..."
	}

	return fmt.Sprintf(
		"üéå %s\n‚≠ê %.1f\nüì∫ %s —Å–µ—Ä—ñ–π\nüìä %s\nüé≠ %s\n\nüìù %s",
		anime.Title,
		anime.Score,
		episodesText,
		anime.Status,
		genresText,
		synopsis,
	)
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
func sendAnimeWithPhoto(bot *tgbotapi.BotAPI, chatID int64, anime AnimeData, lang string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	caption := formatAnimeDetails(anime, lang)

	if anime.Images.JPG.LargeImageURL != "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(anime.Images.JPG.LargeImageURL))
		photo.Caption = caption
		if keyboard != nil {
			photo.ReplyMarkup = *keyboard
		}
		bot.Send(photo)
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, caption)
		if keyboard != nil {
			msg.ReplyMarkup = *keyboard
		}
		bot.Send(msg)
	}
}

// –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
func logUserAction(userID int64, action string, lang string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if !knownUsers[userID] {
		knownUsers[userID] = true
		botAnalytics.TotalUsers++
		fmt.Printf("üìä –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—Å–µ–≥–æ: %d\n", botAnalytics.TotalUsers)
	}

	// –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
	botAnalytics.CommandsUsed[action]++

	// –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤
	botAnalytics.LanguagesUsed[lang]++

	fmt.Printf("üìä –î–µ–π—Å—Ç–≤–∏–µ: %s, –Ø–∑—ã–∫: %s, –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ '%s': %d\n",
		action, lang, action, botAnalytics.CommandsUsed[action])
}

// –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
var messages = map[string]map[string]string{
	"ua": {
		"start":          "–•–º–º... –•—ñ—Ç–æ —Ç—É—Ç —Ç–∞–∫–∏–π —Å–º—ñ–ª–∏–≤–∏–π, —â–æ–± –≤—ñ–¥–≤–æ–ª—ñ–∫–∞—Ç–∏ –º–æ–≥—É—Ç–Ω—å–æ–≥–æ DeusAnimeFlow –±–æ—Ç–∞? üíÄ\n\n–ù—É –¥–æ–æ–æ–±—Ä–µ... –Ø ‚Äî *Anime Finder Bot*, —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ç–∞—î–º–Ω–∏–π –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ —É –ø—ñ—Ç—å–º—É. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É, —Ç–∞ —è –∑–Ω–∞–π–¥—É –π–æ–≥–æ —à–≤–∏–¥—à–µ, –Ω—ñ–∂ —Ç–∏ –≤–∏–≥—É–∫–Ω–µ—à 'Sugoi'.\n\n –Ω–∞ –Ω—É–¥–Ω—ñ –∞–Ω—ñ–º–µ - —Ñ–∏—Ä–∫–∞—é üòè\n\n –ü–æ–≥–Ω–∞–ª–∏, rebel-—á–∞–Ω!",
		"help":           "üåÄ –¢–∏ –∞–∫—Ç–∏–≤—É–≤–∞–≤ –°–¢–ï–ù–î *ANIME FINDER*! üåÄ\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–æ—ë –∞–Ω–∏–º–µ-–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –∏–ª–∏ –º–∞–Ω–≥–∏ ‚Äî –∏ –Ø, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥, –≤—ã–¥–∞–º —Ç–µ–±–µ:\nüéØ –ù–∞–∑–≤–∞–Ω–∏–µ\nüìä –†–µ–π—Ç–∏–Ω–≥\nüí• (–≤ –±—É–¥—É—â–µ–º ‚Äî –∂–∞–Ω—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ)\n\nüí¨ –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç–æ–π–Ω—ã–µ –î–∂–æ—Å—Ç–∞—Ä–∞:\n/start ‚Äî *–ü—Ä–∏–∑–æ–≤–∏ —Å—Ç–µ–Ω–¥!*\n/help ‚Äî *–í—ã–∑–æ–≤–∏ —Å–∏–ª—É –º—É–¥—Ä–æ—Å—Ç–∏!*",
		"empty_message":  "–ê —â–æ–∂ —Ç—É—Ç —Ç–∞–∫ –ø—É—Å—Ç–æ, —Ç—Ä—è—Å—Ü—è –±–æ–≥—É? –†–æ–∑—à–∏—Ä—å —Å–≤–æ—ó –≤–æ–ª–æ–¥—ñ–Ω–Ω—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∞–Ω—ñ–º–µ —ñ —è –π–æ–≥–æ –∑–Ω–∞–π–¥—É! –ù–µ –±—É–¥—å —Ç–∞–∫–∏–º –ª–µ–¥–∞—â–∏–º, rebel-—á–∞–Ω!",
		"api_error":      "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∞–Ω—ñ–º–µ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ, rebel-—á–∞–Ω.",
		"read_error":     "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API. –ú–æ–∂–µ, —Å–µ—Ä–≤–µ—Ä –≤—Ç–æ–º–∏–≤—Å—è? –ß–∏ —Ü–µ Kuromi –∑–Ω–æ–≤—É —à–∞–ª–∏—Ç—å?",
		"json_error":     "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API. –ú–æ–∂–µ, —Å–µ—Ä–≤–µ—Ä –≤–∏—Ä—ñ—à–∏–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —Å–≤–æ—î–º—É —Ç–∞—î–º–Ω–æ–º—É –¥—ñ–∞–ª–µ–∫—Ç—ñ?",
		"not_found":      "–ê–Ω—ñ–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –Ω–∞–∑–≤—É, –º–æ–∂–µ —â–æ—Å—å –±—ñ–ª—å—à EPIC?",
		"anime_found":    "üéå –ù–∞–∑–≤–∞: %s\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f",
		"lang_changed":   "üåç –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Å–æ–ª–æ–≤'—ó–Ω–∞! –ü–æ—â–µ–±–µ—á–µ–º–æ —Ä–∞–∑–æ–º, rebel-—á–∞–Ω!",
		"random_anime":   "üé≤ –í–∏–¥–∫—É—Å—ñ–Ω—å–∫–µ –∞–Ω—ñ–º–µ –¥–ª—è —Ç–µ–±–µ –º—ñ–π –ø—É–ø—Å–∏–∫—É:",
		"top_anime":      "üèÜ –¢–æ–ø –∞–Ω—ñ–º–µ:",
		"donate_message": "üíñ –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è –±–æ—Ç? –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞!\n\nüåü –¢–≤–æ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó!\n\n–û–±–µ—Ä–∏ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–±:",
		"donate_thanks":  "üíñ –î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, rebel-—á–∞–Ω! –¢–∏ –∫—Ä—É—Ç–∏–π! üî•",
		"btn_random":     "üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ",
		"btn_top":        "üèÜ –¢–æ–ø",
		"btn_search":     "üîÑ –ù–æ–≤–∏–π –ø–æ—à—É–∫",
		"stats":          "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
	},
	"en": {
		"start":          "Hmm... Who dares to disturb the DeusAnimeFlow bot? üíÄ\n\nAlright... I'm *Anime Finder Bot*, your personal dark guide to the anime world. Write a title, and I'll find it faster than you can say 'Sugoi'.\n\nBut remember... if it's boring anime ‚Äî I'll snort. üòè\n\nLet's go searching, rebel-chan!",
		"help":           "üåÄ You activated STAND *ANIME FINDER*! üåÄ\n\nThis bot is created for those who seek their anime destiny. Write anime or manga title ‚Äî and I, your personal stand, will give you:\nüéØ Title\nüìä Rating\nüí• (in future ‚Äî genre and description)\n\nüí¨ Commands worthy of Joestar:\n/start ‚Äî *Summon the stand!*\n/help ‚Äî *Call the power of wisdom!*",
		"empty_message":  "What's so empty here, for crying out loud? Expand your domain, write anime title and I'll find it! Don't be so lazy, rebel-chan!",
		"api_error":      "Error occurred while searching anime. Try later, rebel-chan.",
		"read_error":     "Error reading API response. Maybe server got tired? Or is Kuromi messing around again?",
		"json_error":     "Error parsing JSON response from API. Maybe server decided to speak its secret dialect?",
		"not_found":      "Anime not found. Try another title, maybe something more EPIC?",
		"anime_found":    "üéå Title: %s\n‚≠ê Rating: %.1f",
		"lang_changed":   "üåç Language changed to English! Now I'll speak with you in English, rebel-chan!",
		"random_anime":   "üé≤ Random anime for you:",
		"top_anime":      "üèÜ Top anime:",
		"donate_message": "üíñ Like the bot? Support the creator!\n\nüåü Your power-up helps us grow and unlock new features!\n\nChoose your favorite way to support:",
		"donate_thanks":  "üíñ Arigato for your support, rebel-chan! You're awesome! üî•",
		"btn_random":     "üé≤ Random",
		"btn_top":        "üèÜ Top",
		"btn_search":     "üîÑ New search",
		"stats":          "üìä Statistics",
	},
	"da": {
		"start":          "Hvem t√∏r forstyrre DeusAnimeFlow-botten? üíÄ\n\nOkay da... Jeg er *Anime Finder Bot*, din personlige m√∏rke guide til anime-verdenen. Skriv en titel, og jeg finder det hurtigere, end du kan sige 'Sugoi'.\n\nMen husk... hvis det er kedelig anime ‚Äî s√• fnyster jeg. üòè\n\nLad os s√∏ge, rebel-chan!",
		"help":           "üåÄ Du har aktiveret STANDEN *ANIME FINDER*! üåÄ\n\nDenne bot er skabt til dem, der s√∏ger deres anime-sk√¶bne. Skriv titlen p√• en anime eller manga ‚Äî og jeg, din personlige stand, vil give dig:\nüéØ Titel\nüìä Bed√∏mmelse\nüí• (senere ‚Äî genre og beskrivelse)\n\nüí¨ Kommandoer v√¶rdige en Joestar:\n/start ‚Äî *P√•kald standen!*\n/help ‚Äî *Tilkald visdommens kraft!*",
		"empty_message":  "Hvad er s√• tomt her, alts√•? Udvid dit dom√¶ne og skriv en anime-titel! V√¶r nu ikke doven, rebel-chan!",
		"api_error":      "Der opstod en fejl under s√∏gning. Pr√∏v igen senere, rebel-chan.",
		"read_error":     "Fejl ved l√¶sning af API-svar. M√•ske blev serveren tr√¶t? Eller leger Kuromi igen?",
		"json_error":     "Fejl ved fortolkning af JSON-svar fra API. Taler serveren sit hemmelige sprog?",
		"not_found":      "Anime ikke fundet. Pr√∏v en anden titel ‚Äî m√•ske noget mere EPISK?",
		"anime_found":    "üéå Titel: %s\n‚≠ê Bed√∏mmelse: %.1f",
		"lang_changed":   "üåç Sproget er nu √¶ndret til dansk! Klar til at snakke med mig, rebel-chan? R√∏dgr√∏d med fl√∏de, huh?! üòèüá©üá∞",
		"random_anime":   "üé≤ Tilf√¶ldig anime til dig:",
		"top_anime":      "üèÜ Top anime:",
		"donate_message": "üíñ Kan du lide botten? St√∏t skaberen!\n\nüåü Din energi hj√¶lper os med at vokse og f√• nye funktioner!\n\nV√¶lg den m√•de, du vil st√∏tte p√•:",
		"donate_thanks":  "üíñ Tak for st√∏tten, rebel-chan! Du er mega sej! üî•",
		"btn_random":     "üé≤ Tilf√¶ldig",
		"btn_top":        "üèÜ Top",
		"btn_search":     "üîÑ Ny s√∏gning",
		"stats":          "üìä Statistik",
	},
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
var botAnalytics = Analytics{
	TotalUsers:    0,
	CommandsUsed:  make(map[string]int),
	LanguagesUsed: make(map[string]int),
}

var knownUsers = make(map[int64]bool) // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

func Start() {

	err := godotenv.Load()
	if err != nil {
		log.Panic("Loading error .env file")
	}
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Panic("TELEGRAM_TOKEN not found in .env")
	}
	fmt.Println("Bot started")

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	fmt.Println("Bot authorized How:", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	userLangs := make(map[int64]string) // userID -> –≤—ã–±—ÄÔøΩÔøΩ–Ω–Ω—ã–π —è–∑—ã–∫

	for update := range updates {
		if update.Message != nil {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
			fmt.Println("Message Received:", update.Message.Text)

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
			userID := update.Message.From.ID
			chatID := update.Message.Chat.ID
			lang := userLangs[userID]
			if lang == "" {
				lang = "ua" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
			}

			var responseText string
			var keyboard *tgbotapi.InlineKeyboardMarkup

			if update.Message.IsCommand() && update.Message.Command() == cmdStart {
				logUserAction(userID, "start", lang)
				responseText = messages[lang]["start"]
				languageKeyboard := createLanguageKeyboard()
				keyboard = &languageKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdHelp {
				logUserAction(userID, "help", lang)
				responseText = messages[lang]["help"]
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdRandom {
				logUserAction(userID, "random", lang)
				anime := getRandomAnime(lang)
				quickKeyboard := createQuickActionsKeyboard(lang)
				sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
				continue

			} else if update.Message.IsCommand() && update.Message.Command() == cmdTop {
				logUserAction(userID, "top", lang)
				responseText = getTopAnime(lang)
				quickKeyboard := createQuickActionsKeyboard(lang)
				keyboard = &quickKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdDonate {
				logUserAction(userID, "donate", lang)
				responseText = messages[lang]["donate_message"]
				donateKeyboard := createDonateKeyboard()
				keyboard = &donateKeyboard

			} else if update.Message.IsCommand() && update.Message.Command() == cmdStats {
				logUserAction(userID, "stats", lang)
				statsText := fmt.Sprintf("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n\nüìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n", botAnalytics.TotalUsers)

				for command, count := range botAnalytics.CommandsUsed {
					statsText += fmt.Sprintf("‚Ä¢ %s: %d —Ä–∞–∑\n", command, count)
				}

				statsText += "\nüåç –Ø–∑—ã–∫–∏:\n"
				for language, count := range botAnalytics.LanguagesUsed {
					statsText += fmt.Sprintf("‚Ä¢ %s: %d —Ä–∞–∑\n", language, count)
				}

				responseText = statsText

			} else if !update.Message.IsCommand() {
				if update.Message.Text == "" {
					responseText = messages[lang]["empty_message"]
				} else {
					logUserAction(userID, "search", lang)
					anime := searchAnime(update.Message.Text, lang)
					quickKeyboard := createQuickActionsKeyboard(lang)
					sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
					continue
				}
			}

			// –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
			msg := tgbotapi.NewMessage(chatID, responseText)
			if keyboard != nil {
				msg.ReplyMarkup = *keyboard
			}
			bot.Send(msg)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			userID := update.CallbackQuery.From.ID
			chatID := update.CallbackQuery.Message.Chat.ID

			lang := userLangs[userID]
			if lang == "" {
				lang = "ua"
			}

			var responseText string
			var withKeyboard bool

			switch update.CallbackQuery.Data {
			case "lang_ua":
				logUserAction(userID, "lang_change", "ua")
				userLangs[userID] = "ua"
				responseText = messages["ua"]["lang_changed"] + "\n" + messages["ua"]["start"]

			case "lang_en":
				logUserAction(userID, "lang_change", "en")
				userLangs[userID] = "en"
				responseText = messages["en"]["lang_changed"] + "\n" + messages["en"]["start"]

			case "lang_da":
				logUserAction(userID, "lang_change", "da")
				userLangs[userID] = "da"
				responseText = messages["da"]["lang_changed"] + "\n" + messages["da"]["start"]

			case "action_random":
				logUserAction(userID, "random", lang)
				anime := getRandomAnime(lang)
				quickKeyboard := createQuickActionsKeyboard(lang)
				sendAnimeWithPhoto(bot, chatID, anime, lang, &quickKeyboard)
				continue

			case "action_top":
				logUserAction(userID, "top", lang)
				responseText = getTopAnime(lang)
				withKeyboard = true

			case "action_search":
				logUserAction(userID, "search_help", lang)
				responseText = messages[lang]["empty_message"]

			case "donate_thanks":
				logUserAction(userID, "donate_thanks", lang)
				responseText = messages[lang]["donate_thanks"]
			}

			msg := tgbotapi.NewMessage(chatID, responseText)

			if withKeyboard {
				msg.ReplyMarkup = createQuickActionsKeyboard(lang)
			}

			bot.Send(msg)
		}
	}
}
